# -*- coding: utf-8 -*-
"""Task4_OASIS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t60hYwCgR56USnXSrzD_0Hb7xFJm4He9

OASIS Task 4:  **Email Spam Detection with Machine Learning**
"""

#importing the libraries
import numpy as np
import pandas as pd
import nltk
from nltk.corpus import stopwords
import string
import warnings
warnings.simplefilter("ignore")

#importing the dataset 
df = pd.read_csv('/content/drive/MyDrive/emails.csv')
df.head()

#shape of the dataset
df.shape

#dataset columns
df.columns

#checking for the duplicates and removing them
df.drop_duplicates(inplace=True)
print(df.shape)

#checking for the null values
print(df.isnull().sum())

# download the stopwords package
#Stop words in natural language processing, are useless words (data)
nltk.download("stopwords")

#function to clean the text and return the tokens using stopwords
def process(text):
    nopunc = [char for char in text if char not in string.punctuation]
    nopunc = ''.join(nopunc)

    clean = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]
    return clean

# to show the tokenization
df['text'].head().apply(process)

#convert the text into a matrix of token counts using countvectorizer
from sklearn.feature_extraction.text import CountVectorizer
message = CountVectorizer(analyzer=process).fit_transform(df['text'])

#split the data into 80% training and 20% testing
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(message, df['spam'], test_size=0.20, random_state=0)

# To see the shape of the data
print(message.shape)

# create and train the Naive Bayes Classifier
from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB().fit(xtrain, ytrain)

#classifiers prediction and actual values on the data set
print(classifier.predict(xtrain))
print(ytrain.values)

# Evaluating the model on the training data set
from sklearn.metrics import classification_report
pred = classifier.predict(xtrain)
print(classification_report(ytrain, pred))

from sklearn.metrics import confusion_matrix
print("Confusion Matrix: \n", confusion_matrix(ytrain, pred))

from sklearn.metrics import accuracy_score
print("Accuracy: \n", accuracy_score(ytrain, pred))

#print the predictions
print(classifier.predict(xtest))

#print the actual values
print(ytest.values)

# Evaluating the model on the training data set
from sklearn.metrics import classification_report
pred = classifier.predict(xtest)
print(classification_report(ytest, pred))

from sklearn.metrics import confusion_matrix
print("Confusion Matrix: \n", confusion_matrix(ytest, pred))

from sklearn.metrics import accuracy_score
print("Accuracy: \n", accuracy_score(ytest, pred))